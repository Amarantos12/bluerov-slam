<launch>
    <!-- 定义参数 -->
    <arg name="rviz" default="true"/> <!-- 是否启动 RViz 可视化工具，默认开启 -->
    <arg name="enable_slam" default="true"/> <!-- 是否启用 SLAM 功能，默认开启 -->
    <arg name="kalman_dead_reckoning" default="false"/> <!-- 是否使用卡尔曼滤波进行死 reckoning，默认禁用 -->

    <!-- 离线模式相关参数 -->
    <arg name="file" default=""/> <!-- 输入的录制文件路径，默认为空 -->
    <arg name="start" default="0.0"/> <!-- 文件处理的起始时间（秒） -->
    <arg name="duration" default="-1"/> <!-- 文件处理的持续时间（秒），-1 表示处理整个文件 -->
    <arg name="kill" default="false"/> <!-- 是否在节点失败时终止整个启动，默认不终止 -->

    <node name="republish1" type="republish" pkg="image_transport" output="screen" args="compressed in:=/son raw out:=/son" />

    <!-- 离线模式 -->
    <group ns="bruce" unless="$(eval arg('file') == '')"> <!-- 当指定了文件路径时，进入离线模式 -->
        <group ns="slam"> <!-- SLAM 命名空间 -->
        
            <!-- 加载死 reckoning 的配置文件 -->
            <rosparam command="load" file="$(find bruce_slam)/config/dead_reckoning.yaml" ns="localization"/>
            <!-- 加载特征提取的配置文件 -->
            <rosparam command="load" file="$(find bruce_slam)/config/feature.yaml" ns="feature_extraction"/>
            <!-- 加载陀螺仪的配置文件 -->
            <rosparam command="load" file="$(find bruce_slam)/config/gyro.yaml" ns="gyro"/>
            <!-- 启动 SLAM 节点，处理录制文件 -->
            <node pkg="bruce_slam" name="slam" type="slam_node.py" output="screen"
                args="--file $(arg file) --start=$(arg start) --duration=$(arg duration)" required="$(arg kill)">
                <!-- 加载 SLAM 配置文件 -->
                <rosparam command="load" file="$(find bruce_slam)/config/slam.yaml" subst_value="true"/>
                <!-- 设置是否启用 SLAM 参数 -->
                <param name="enable_slam" value="$(arg enable_slam)"/>
            </node>
        </group>
    </group>

    <!-- 在线模式 -->
    <group ns="bruce" if="$(eval arg('file') == '')"> <!-- 当未指定文件路径时，进入在线模式 -->
        <group ns="slam"> <!-- SLAM 命名空间 -->

            <!-- 如果未使用卡尔曼滤波，启动陀螺仪融合节点 -->
            <node if="$(eval kalman_dead_reckoning == false)" pkg="bruce_slam" name="gyro_fusion" type="gyro_node.py" output="screen">
                <!-- 加载陀螺仪配置文件 -->
                <rosparam command="load" file="$(find bruce_slam)/config/gyro.yaml"/>
            </node>

            <!-- 如果未使用卡尔曼滤波，启动死 reckoning 节点 -->
            <node if="$(eval kalman_dead_reckoning == false)" pkg="bruce_slam" name="dead_reckoning" type="dead_reckoning_node.py" output="screen">
                <!-- 加载死 reckoning 配置文件 -->
                <rosparam command="load" file="$(find bruce_slam)/config/dead_reckoning.yaml"/>
            </node>

            <!-- 如果启用了卡尔曼滤波，启动卡尔曼滤波节点 -->
            <node if="$(eval kalman_dead_reckoning == true)" pkg="bruce_slam" name="kalman" type="kalman_node.py" output="screen">
                <!-- 加载卡尔曼滤波配置文件 -->
                <rosparam command="load" file="$(find bruce_slam)/config/kalman.yaml"/>
            </node>
            
            <!-- 启动特征提取节点 -->
            <node pkg="bruce_slam" name="feature_extraction" type="feature_extraction_node.py" output="screen">
                <!-- 加载特征提取配置文件 -->
                <rosparam command="load" file="$(find bruce_slam)/config/feature.yaml" subst_value="true"/>
            </node>

            <!-- 启动 SLAM 节点 -->
            <node pkg="bruce_slam" name="slam" type="slam_node.py" output="screen">
                <!-- 加载 SLAM 配置文件 -->
                <rosparam command="load" file="$(find bruce_slam)/config/slam.yaml" subst_value="true"/>
                <!-- 设置是否启用 SLAM 参数 -->
                <param name="enable_slam" value="$(arg enable_slam)"/>
                <!-- 设置是否保存图像参数，默认不保存 -->
                <param name="save_fig" value="false"/>
            </node>

        </group>
        <!-- 发布静态变换，从 world 到 map -->
        <node pkg="tf" name="map_to_world_tf_publisher" type="static_transform_publisher" args="0 0 0 0 0 3.14159 world map 100"/>
    </group>

    <!-- 如果启用了 RViz，启动 RViz 可视化工具并加载指定配置文件 -->
    <node if="$(arg rviz)" type="rviz" name="rviz" pkg="rviz" args="-d $(find bruce_slam)/rviz/video.rviz" />

</launch>