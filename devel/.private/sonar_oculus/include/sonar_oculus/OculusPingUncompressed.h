// Generated by gencpp from file sonar_oculus/OculusPingUncompressed.msg
// DO NOT EDIT!


#ifndef SONAR_OCULUS_MESSAGE_OCULUSPINGUNCOMPRESSED_H
#define SONAR_OCULUS_MESSAGE_OCULUSPINGUNCOMPRESSED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sonar_oculus/OculusFire.h>
#include <sensor_msgs/Image.h>

namespace sonar_oculus
{
template <class ContainerAllocator>
struct OculusPingUncompressed_
{
  typedef OculusPingUncompressed_<ContainerAllocator> Type;

  OculusPingUncompressed_()
    : header()
    , fire_msg()
    , ping_id(0)
    , part_number(0)
    , start_time(0)
    , bearings()
    , range_resolution(0.0)
    , num_ranges(0)
    , num_beams(0)
    , ping()  {
    }
  OculusPingUncompressed_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fire_msg(_alloc)
    , ping_id(0)
    , part_number(0)
    , start_time(0)
    , bearings(_alloc)
    , range_resolution(0.0)
    , num_ranges(0)
    , num_beams(0)
    , ping(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::sonar_oculus::OculusFire_<ContainerAllocator>  _fire_msg_type;
  _fire_msg_type fire_msg;

   typedef uint32_t _ping_id_type;
  _ping_id_type ping_id;

   typedef uint16_t _part_number_type;
  _part_number_type part_number;

   typedef uint32_t _start_time_type;
  _start_time_type start_time;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _bearings_type;
  _bearings_type bearings;

   typedef double _range_resolution_type;
  _range_resolution_type range_resolution;

   typedef uint32_t _num_ranges_type;
  _num_ranges_type num_ranges;

   typedef uint32_t _num_beams_type;
  _num_beams_type num_beams;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _ping_type;
  _ping_type ping;





  typedef boost::shared_ptr< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> const> ConstPtr;

}; // struct OculusPingUncompressed_

typedef ::sonar_oculus::OculusPingUncompressed_<std::allocator<void> > OculusPingUncompressed;

typedef boost::shared_ptr< ::sonar_oculus::OculusPingUncompressed > OculusPingUncompressedPtr;
typedef boost::shared_ptr< ::sonar_oculus::OculusPingUncompressed const> OculusPingUncompressedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator1> & lhs, const ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.fire_msg == rhs.fire_msg &&
    lhs.ping_id == rhs.ping_id &&
    lhs.part_number == rhs.part_number &&
    lhs.start_time == rhs.start_time &&
    lhs.bearings == rhs.bearings &&
    lhs.range_resolution == rhs.range_resolution &&
    lhs.num_ranges == rhs.num_ranges &&
    lhs.num_beams == rhs.num_beams &&
    lhs.ping == rhs.ping;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator1> & lhs, const ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sonar_oculus

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4339b8338f845749301a38b07bd11f83";
  }

  static const char* value(const ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4339b8338f845749ULL;
  static const uint64_t static_value2 = 0x301a38b07bd11f83ULL;
};

template<class ContainerAllocator>
struct DataType< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sonar_oculus/OculusPingUncompressed";
  }

  static const char* value(const ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"OculusFire fire_msg\n"
"\n"
"uint32     ping_id\n"
"uint16     part_number\n"
"uint32     start_time\n"
"\n"
"int16[]    bearings         # bearings of beams (bearing * PI / 18000)\n"
"float64    range_resolution # length of a single range bin\n"
"uint32     num_ranges       # number of range lines in the image\n"
"uint32     num_beams        # number of bearings in the image     \n"
"\n"
"sensor_msgs/Image ping\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sonar_oculus/OculusFire\n"
"Header header\n"
"\n"
"uint8    mode  \n"
"uint8    gamma\n"
"uint8    flags\n"
"float64  range\n"
"float64  gain\n"
"float64  speed_of_sound\n"
"float64  salinity\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
;
  }

  static const char* value(const ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fire_msg);
      stream.next(m.ping_id);
      stream.next(m.part_number);
      stream.next(m.start_time);
      stream.next(m.bearings);
      stream.next(m.range_resolution);
      stream.next(m.num_ranges);
      stream.next(m.num_beams);
      stream.next(m.ping);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OculusPingUncompressed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sonar_oculus::OculusPingUncompressed_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "fire_msg: ";
    Printer< ::sonar_oculus::OculusFire_<ContainerAllocator> >::stream(s, indent + "  ", v.fire_msg);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ping_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ping_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "part_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.part_number);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "start_time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.start_time);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "bearings: ";
    if (v.bearings.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.bearings.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int16_t>::stream(s, true ? std::string() : indent + "    ", v.bearings[i]);
    }
    if (v.bearings.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "range_resolution: ";
    Printer<double>::stream(s, indent + "  ", v.range_resolution);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "num_ranges: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_ranges);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "num_beams: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_beams);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ping: ";
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.ping);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SONAR_OCULUS_MESSAGE_OCULUSPINGUNCOMPRESSED_H
