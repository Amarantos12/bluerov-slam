# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sonar_oculus/OculusPingUncompressed.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import sonar_oculus.msg
import std_msgs.msg

class OculusPingUncompressed(genpy.Message):
  _md5sum = "4339b8338f845749301a38b07bd11f83"
  _type = "sonar_oculus/OculusPingUncompressed"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

OculusFire fire_msg

uint32     ping_id
uint16     part_number
uint32     start_time

int16[]    bearings         # bearings of beams (bearing * PI / 18000)
float64    range_resolution # length of a single range bin
uint32     num_ranges       # number of range lines in the image
uint32     num_beams        # number of bearings in the image     

sensor_msgs/Image ping

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sonar_oculus/OculusFire
Header header

uint8    mode  
uint8    gamma
uint8    flags
float64  range
float64  gain
float64  speed_of_sound
float64  salinity
================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)
"""
  __slots__ = ['header','fire_msg','ping_id','part_number','start_time','bearings','range_resolution','num_ranges','num_beams','ping']
  _slot_types = ['std_msgs/Header','sonar_oculus/OculusFire','uint32','uint16','uint32','int16[]','float64','uint32','uint32','sensor_msgs/Image']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,fire_msg,ping_id,part_number,start_time,bearings,range_resolution,num_ranges,num_beams,ping

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OculusPingUncompressed, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fire_msg is None:
        self.fire_msg = sonar_oculus.msg.OculusFire()
      if self.ping_id is None:
        self.ping_id = 0
      if self.part_number is None:
        self.part_number = 0
      if self.start_time is None:
        self.start_time = 0
      if self.bearings is None:
        self.bearings = []
      if self.range_resolution is None:
        self.range_resolution = 0.
      if self.num_ranges is None:
        self.num_ranges = 0
      if self.num_beams is None:
        self.num_beams = 0
      if self.ping is None:
        self.ping = sensor_msgs.msg.Image()
    else:
      self.header = std_msgs.msg.Header()
      self.fire_msg = sonar_oculus.msg.OculusFire()
      self.ping_id = 0
      self.part_number = 0
      self.start_time = 0
      self.bearings = []
      self.range_resolution = 0.
      self.num_ranges = 0
      self.num_beams = 0
      self.ping = sensor_msgs.msg.Image()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.fire_msg.header.seq, _x.fire_msg.header.stamp.secs, _x.fire_msg.header.stamp.nsecs))
      _x = self.fire_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B4dIHI().pack(_x.fire_msg.mode, _x.fire_msg.gamma, _x.fire_msg.flags, _x.fire_msg.range, _x.fire_msg.gain, _x.fire_msg.speed_of_sound, _x.fire_msg.salinity, _x.ping_id, _x.part_number, _x.start_time))
      length = len(self.bearings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.bearings))
      _x = self
      buff.write(_get_struct_d5I().pack(_x.range_resolution, _x.num_ranges, _x.num_beams, _x.ping.header.seq, _x.ping.header.stamp.secs, _x.ping.header.stamp.nsecs))
      _x = self.ping.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ping.height, _x.ping.width))
      _x = self.ping.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.ping.is_bigendian, _x.ping.step))
      _x = self.ping.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fire_msg is None:
        self.fire_msg = sonar_oculus.msg.OculusFire()
      if self.ping is None:
        self.ping = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.fire_msg.header.seq, _x.fire_msg.header.stamp.secs, _x.fire_msg.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fire_msg.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fire_msg.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 45
      (_x.fire_msg.mode, _x.fire_msg.gamma, _x.fire_msg.flags, _x.fire_msg.range, _x.fire_msg.gain, _x.fire_msg.speed_of_sound, _x.fire_msg.salinity, _x.ping_id, _x.part_number, _x.start_time,) = _get_struct_3B4dIHI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bearings = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.range_resolution, _x.num_ranges, _x.num_beams, _x.ping.header.seq, _x.ping.header.stamp.secs, _x.ping.header.stamp.nsecs,) = _get_struct_d5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ping.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ping.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ping.height, _x.ping.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ping.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ping.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.ping.is_bigendian, _x.ping.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.ping.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.fire_msg.header.seq, _x.fire_msg.header.stamp.secs, _x.fire_msg.header.stamp.nsecs))
      _x = self.fire_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B4dIHI().pack(_x.fire_msg.mode, _x.fire_msg.gamma, _x.fire_msg.flags, _x.fire_msg.range, _x.fire_msg.gain, _x.fire_msg.speed_of_sound, _x.fire_msg.salinity, _x.ping_id, _x.part_number, _x.start_time))
      length = len(self.bearings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.bearings.tostring())
      _x = self
      buff.write(_get_struct_d5I().pack(_x.range_resolution, _x.num_ranges, _x.num_beams, _x.ping.header.seq, _x.ping.header.stamp.secs, _x.ping.header.stamp.nsecs))
      _x = self.ping.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.ping.height, _x.ping.width))
      _x = self.ping.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.ping.is_bigendian, _x.ping.step))
      _x = self.ping.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fire_msg is None:
        self.fire_msg = sonar_oculus.msg.OculusFire()
      if self.ping is None:
        self.ping = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.fire_msg.header.seq, _x.fire_msg.header.stamp.secs, _x.fire_msg.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fire_msg.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fire_msg.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 45
      (_x.fire_msg.mode, _x.fire_msg.gamma, _x.fire_msg.flags, _x.fire_msg.range, _x.fire_msg.gain, _x.fire_msg.speed_of_sound, _x.fire_msg.salinity, _x.ping_id, _x.part_number, _x.start_time,) = _get_struct_3B4dIHI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bearings = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      _x = self
      start = end
      end += 28
      (_x.range_resolution, _x.num_ranges, _x.num_beams, _x.ping.header.seq, _x.ping.header.stamp.secs, _x.ping.header.stamp.nsecs,) = _get_struct_d5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ping.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ping.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.ping.height, _x.ping.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ping.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ping.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.ping.is_bigendian, _x.ping.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.ping.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3B4dIHI = None
def _get_struct_3B4dIHI():
    global _struct_3B4dIHI
    if _struct_3B4dIHI is None:
        _struct_3B4dIHI = struct.Struct("<3B4dIHI")
    return _struct_3B4dIHI
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_d5I = None
def _get_struct_d5I():
    global _struct_d5I
    if _struct_d5I is None:
        _struct_d5I = struct.Struct("<d5I")
    return _struct_d5I
