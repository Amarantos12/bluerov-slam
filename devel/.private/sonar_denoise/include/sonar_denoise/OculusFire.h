// Generated by gencpp from file sonar_denoise/OculusFire.msg
// DO NOT EDIT!


#ifndef SONAR_DENOISE_MESSAGE_OCULUSFIRE_H
#define SONAR_DENOISE_MESSAGE_OCULUSFIRE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sonar_denoise
{
template <class ContainerAllocator>
struct OculusFire_
{
  typedef OculusFire_<ContainerAllocator> Type;

  OculusFire_()
    : header()
    , mode(0)
    , gamma(0)
    , flags(0)
    , range(0.0)
    , gain(0.0)
    , speed_of_sound(0.0)
    , salinity(0.0)  {
    }
  OculusFire_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , gamma(0)
    , flags(0)
    , range(0.0)
    , gain(0.0)
    , speed_of_sound(0.0)
    , salinity(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _gamma_type;
  _gamma_type gamma;

   typedef uint8_t _flags_type;
  _flags_type flags;

   typedef double _range_type;
  _range_type range;

   typedef double _gain_type;
  _gain_type gain;

   typedef double _speed_of_sound_type;
  _speed_of_sound_type speed_of_sound;

   typedef double _salinity_type;
  _salinity_type salinity;





  typedef boost::shared_ptr< ::sonar_denoise::OculusFire_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sonar_denoise::OculusFire_<ContainerAllocator> const> ConstPtr;

}; // struct OculusFire_

typedef ::sonar_denoise::OculusFire_<std::allocator<void> > OculusFire;

typedef boost::shared_ptr< ::sonar_denoise::OculusFire > OculusFirePtr;
typedef boost::shared_ptr< ::sonar_denoise::OculusFire const> OculusFireConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sonar_denoise::OculusFire_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sonar_denoise::OculusFire_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sonar_denoise::OculusFire_<ContainerAllocator1> & lhs, const ::sonar_denoise::OculusFire_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.gamma == rhs.gamma &&
    lhs.flags == rhs.flags &&
    lhs.range == rhs.range &&
    lhs.gain == rhs.gain &&
    lhs.speed_of_sound == rhs.speed_of_sound &&
    lhs.salinity == rhs.salinity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sonar_denoise::OculusFire_<ContainerAllocator1> & lhs, const ::sonar_denoise::OculusFire_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sonar_denoise

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sonar_denoise::OculusFire_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sonar_denoise::OculusFire_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sonar_denoise::OculusFire_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sonar_denoise::OculusFire_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sonar_denoise::OculusFire_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sonar_denoise::OculusFire_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sonar_denoise::OculusFire_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ab4b9458f99dac20a81bfd379cffcb5";
  }

  static const char* value(const ::sonar_denoise::OculusFire_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ab4b9458f99dac2ULL;
  static const uint64_t static_value2 = 0x0a81bfd379cffcb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::sonar_denoise::OculusFire_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sonar_denoise/OculusFire";
  }

  static const char* value(const ::sonar_denoise::OculusFire_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sonar_denoise::OculusFire_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8    mode  \n"
"uint8    gamma\n"
"uint8    flags\n"
"float64  range\n"
"float64  gain\n"
"float64  speed_of_sound\n"
"float64  salinity\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sonar_denoise::OculusFire_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sonar_denoise::OculusFire_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.gamma);
      stream.next(m.flags);
      stream.next(m.range);
      stream.next(m.gain);
      stream.next(m.speed_of_sound);
      stream.next(m.salinity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OculusFire_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sonar_denoise::OculusFire_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sonar_denoise::OculusFire_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gamma: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gamma);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "flags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flags);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "range: ";
    Printer<double>::stream(s, indent + "  ", v.range);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gain: ";
    Printer<double>::stream(s, indent + "  ", v.gain);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed_of_sound: ";
    Printer<double>::stream(s, indent + "  ", v.speed_of_sound);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "salinity: ";
    Printer<double>::stream(s, indent + "  ", v.salinity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SONAR_DENOISE_MESSAGE_OCULUSFIRE_H
