# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bruce_msgs/PredictSLAMUpdateRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import nav_msgs.msg
import std_msgs.msg

class PredictSLAMUpdateRequest(genpy.Message):
  _md5sum = "86289840d397dce55a55fd7404f3dfff"
  _type = "bruce_msgs/PredictSLAMUpdateRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 key
bool return_isam2_update
nav_msgs/Path[] paths

================================================================================
MSG: nav_msgs/Path
#An array of poses that represents a Path for a robot to follow
Header header
geometry_msgs/PoseStamped[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['key','return_isam2_update','paths']
  _slot_types = ['uint32','bool','nav_msgs/Path[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       key,return_isam2_update,paths

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PredictSLAMUpdateRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.key is None:
        self.key = 0
      if self.return_isam2_update is None:
        self.return_isam2_update = False
      if self.paths is None:
        self.paths = []
    else:
      self.key = 0
      self.return_isam2_update = False
      self.paths = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IB().pack(_x.key, _x.return_isam2_update))
      length = len(self.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.paths:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v3 = val2.header
          _x = _v3.seq
          buff.write(_get_struct_I().pack(_x))
          _v4 = _v3.stamp
          _x = _v4
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v3.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v5 = val2.pose
          _v6 = _v5.position
          _x = _v6
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v7 = _v5.orientation
          _x = _v7
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.paths is None:
        self.paths = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.key, _x.return_isam2_update,) = _get_struct_IB().unpack(str[start:end])
      self.return_isam2_update = bool(self.return_isam2_update)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.paths = []
      for i in range(0, length):
        val1 = nav_msgs.msg.Path()
        _v8 = val1.header
        start = end
        end += 4
        (_v8.seq,) = _get_struct_I().unpack(str[start:end])
        _v9 = _v8.stamp
        _x = _v9
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v8.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.PoseStamped()
          _v10 = val2.header
          start = end
          end += 4
          (_v10.seq,) = _get_struct_I().unpack(str[start:end])
          _v11 = _v10.stamp
          _x = _v11
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v10.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v10.frame_id = str[start:end]
          _v12 = val2.pose
          _v13 = _v12.position
          _x = _v13
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v14 = _v12.orientation
          _x = _v14
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.paths.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IB().pack(_x.key, _x.return_isam2_update))
      length = len(self.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.paths:
        _v15 = val1.header
        _x = _v15.seq
        buff.write(_get_struct_I().pack(_x))
        _v16 = _v15.stamp
        _x = _v16
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v15.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v17 = val2.header
          _x = _v17.seq
          buff.write(_get_struct_I().pack(_x))
          _v18 = _v17.stamp
          _x = _v18
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v17.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v19 = val2.pose
          _v20 = _v19.position
          _x = _v20
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v21 = _v19.orientation
          _x = _v21
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.paths is None:
        self.paths = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.key, _x.return_isam2_update,) = _get_struct_IB().unpack(str[start:end])
      self.return_isam2_update = bool(self.return_isam2_update)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.paths = []
      for i in range(0, length):
        val1 = nav_msgs.msg.Path()
        _v22 = val1.header
        start = end
        end += 4
        (_v22.seq,) = _get_struct_I().unpack(str[start:end])
        _v23 = _v22.stamp
        _x = _v23
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v22.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v22.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.PoseStamped()
          _v24 = val2.header
          start = end
          end += 4
          (_v24.seq,) = _get_struct_I().unpack(str[start:end])
          _v25 = _v24.stamp
          _x = _v25
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v24.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v24.frame_id = str[start:end]
          _v26 = val2.pose
          _v27 = _v26.position
          _x = _v27
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v28 = _v26.orientation
          _x = _v28
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.paths.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bruce_msgs/PredictSLAMUpdateResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bruce_msgs.msg
import geometry_msgs.msg
import nav_msgs.msg
import std_msgs.msg

class PredictSLAMUpdateResponse(genpy.Message):
  _md5sum = "6410c519772996708be4e4c7d31590ad"
  _type = "bruce_msgs/PredictSLAMUpdateResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bruce_msgs/ISAM2Update[] isam2_updates
nav_msgs/Path[] keyframes


================================================================================
MSG: bruce_msgs/ISAM2Update
Header header
uint32 key
uint8[] isam2
uint8[] graph
uint8[] values

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: nav_msgs/Path
#An array of poses that represents a Path for a robot to follow
Header header
geometry_msgs/PoseStamped[] poses

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['isam2_updates','keyframes']
  _slot_types = ['bruce_msgs/ISAM2Update[]','nav_msgs/Path[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       isam2_updates,keyframes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PredictSLAMUpdateResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.isam2_updates is None:
        self.isam2_updates = []
      if self.keyframes is None:
        self.keyframes = []
    else:
      self.isam2_updates = []
      self.keyframes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.isam2_updates)
      buff.write(_struct_I.pack(length))
      for val1 in self.isam2_updates:
        _v29 = val1.header
        _x = _v29.seq
        buff.write(_get_struct_I().pack(_x))
        _v30 = _v29.stamp
        _x = _v30
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v29.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.key
        buff.write(_get_struct_I().pack(_x))
        _x = val1.isam2
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.graph
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.values
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.keyframes)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframes:
        _v31 = val1.header
        _x = _v31.seq
        buff.write(_get_struct_I().pack(_x))
        _v32 = _v31.stamp
        _x = _v32
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v31.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v33 = val2.header
          _x = _v33.seq
          buff.write(_get_struct_I().pack(_x))
          _v34 = _v33.stamp
          _x = _v34
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v33.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v35 = val2.pose
          _v36 = _v35.position
          _x = _v36
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v37 = _v35.orientation
          _x = _v37
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.isam2_updates is None:
        self.isam2_updates = None
      if self.keyframes is None:
        self.keyframes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.isam2_updates = []
      for i in range(0, length):
        val1 = bruce_msgs.msg.ISAM2Update()
        _v38 = val1.header
        start = end
        end += 4
        (_v38.seq,) = _get_struct_I().unpack(str[start:end])
        _v39 = _v38.stamp
        _x = _v39
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v38.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v38.frame_id = str[start:end]
        start = end
        end += 4
        (val1.key,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.isam2 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.graph = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.values = str[start:end]
        self.isam2_updates.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframes = []
      for i in range(0, length):
        val1 = nav_msgs.msg.Path()
        _v40 = val1.header
        start = end
        end += 4
        (_v40.seq,) = _get_struct_I().unpack(str[start:end])
        _v41 = _v40.stamp
        _x = _v41
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v40.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v40.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.PoseStamped()
          _v42 = val2.header
          start = end
          end += 4
          (_v42.seq,) = _get_struct_I().unpack(str[start:end])
          _v43 = _v42.stamp
          _x = _v43
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v42.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v42.frame_id = str[start:end]
          _v44 = val2.pose
          _v45 = _v44.position
          _x = _v45
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v46 = _v44.orientation
          _x = _v46
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.keyframes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.isam2_updates)
      buff.write(_struct_I.pack(length))
      for val1 in self.isam2_updates:
        _v47 = val1.header
        _x = _v47.seq
        buff.write(_get_struct_I().pack(_x))
        _v48 = _v47.stamp
        _x = _v48
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v47.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.key
        buff.write(_get_struct_I().pack(_x))
        _x = val1.isam2
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.graph
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.values
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.keyframes)
      buff.write(_struct_I.pack(length))
      for val1 in self.keyframes:
        _v49 = val1.header
        _x = _v49.seq
        buff.write(_get_struct_I().pack(_x))
        _v50 = _v49.stamp
        _x = _v50
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v49.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v51 = val2.header
          _x = _v51.seq
          buff.write(_get_struct_I().pack(_x))
          _v52 = _v51.stamp
          _x = _v52
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v51.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v53 = val2.pose
          _v54 = _v53.position
          _x = _v54
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v55 = _v53.orientation
          _x = _v55
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.isam2_updates is None:
        self.isam2_updates = None
      if self.keyframes is None:
        self.keyframes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.isam2_updates = []
      for i in range(0, length):
        val1 = bruce_msgs.msg.ISAM2Update()
        _v56 = val1.header
        start = end
        end += 4
        (_v56.seq,) = _get_struct_I().unpack(str[start:end])
        _v57 = _v56.stamp
        _x = _v57
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v56.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v56.frame_id = str[start:end]
        start = end
        end += 4
        (val1.key,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.isam2 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.graph = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.values = str[start:end]
        self.isam2_updates.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.keyframes = []
      for i in range(0, length):
        val1 = nav_msgs.msg.Path()
        _v58 = val1.header
        start = end
        end += 4
        (_v58.seq,) = _get_struct_I().unpack(str[start:end])
        _v59 = _v58.stamp
        _x = _v59
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v58.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v58.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.PoseStamped()
          _v60 = val2.header
          start = end
          end += 4
          (_v60.seq,) = _get_struct_I().unpack(str[start:end])
          _v61 = _v60.stamp
          _x = _v61
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v60.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v60.frame_id = str[start:end]
          _v62 = val2.pose
          _v63 = _v62.position
          _x = _v63
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v64 = _v62.orientation
          _x = _v64
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.keyframes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
class PredictSLAMUpdate(object):
  _type          = 'bruce_msgs/PredictSLAMUpdate'
  _md5sum = '18a5f92af2249a995192f2aa3a6de24b'
  _request_class  = PredictSLAMUpdateRequest
  _response_class = PredictSLAMUpdateResponse
