// Generated by gencpp from file bruce_msgs/GetOccupancyMapRequest.msg
// DO NOT EDIT!


#ifndef BRUCE_MSGS_MESSAGE_GETOCCUPANCYMAPREQUEST_H
#define BRUCE_MSGS_MESSAGE_GETOCCUPANCYMAPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bruce_msgs
{
template <class ContainerAllocator>
struct GetOccupancyMapRequest_
{
  typedef GetOccupancyMapRequest_<ContainerAllocator> Type;

  GetOccupancyMapRequest_()
    : frames()
    , resolution(0.0)  {
    }
  GetOccupancyMapRequest_(const ContainerAllocator& _alloc)
    : frames(_alloc)
    , resolution(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _frames_type;
  _frames_type frames;

   typedef float _resolution_type;
  _resolution_type resolution;





  typedef boost::shared_ptr< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetOccupancyMapRequest_

typedef ::bruce_msgs::GetOccupancyMapRequest_<std::allocator<void> > GetOccupancyMapRequest;

typedef boost::shared_ptr< ::bruce_msgs::GetOccupancyMapRequest > GetOccupancyMapRequestPtr;
typedef boost::shared_ptr< ::bruce_msgs::GetOccupancyMapRequest const> GetOccupancyMapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator1> & lhs, const ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.frames == rhs.frames &&
    lhs.resolution == rhs.resolution;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator1> & lhs, const ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bruce_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b41a8bd35ea379747b34a8701220f5d";
  }

  static const char* value(const ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b41a8bd35ea3797ULL;
  static const uint64_t static_value2 = 0x47b34a8701220f5dULL;
};

template<class ContainerAllocator>
struct DataType< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bruce_msgs/GetOccupancyMapRequest";
  }

  static const char* value(const ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32[] frames\n"
"float32 resolution\n"
;
  }

  static const char* value(const ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frames);
      stream.next(m.resolution);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetOccupancyMapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bruce_msgs::GetOccupancyMapRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "frames: ";
    if (v.frames.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.frames.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint32_t>::stream(s, true ? std::string() : indent + "    ", v.frames[i]);
    }
    if (v.frames.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRUCE_MSGS_MESSAGE_GETOCCUPANCYMAPREQUEST_H
