// Generated by gencpp from file bruce_msgs/ISAM2Update.msg
// DO NOT EDIT!


#ifndef BRUCE_MSGS_MESSAGE_ISAM2UPDATE_H
#define BRUCE_MSGS_MESSAGE_ISAM2UPDATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace bruce_msgs
{
template <class ContainerAllocator>
struct ISAM2Update_
{
  typedef ISAM2Update_<ContainerAllocator> Type;

  ISAM2Update_()
    : header()
    , key(0)
    , isam2()
    , graph()
    , values()  {
    }
  ISAM2Update_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , key(0)
    , isam2(_alloc)
    , graph(_alloc)
    , values(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _key_type;
  _key_type key;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _isam2_type;
  _isam2_type isam2;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _graph_type;
  _graph_type graph;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _values_type;
  _values_type values;





  typedef boost::shared_ptr< ::bruce_msgs::ISAM2Update_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bruce_msgs::ISAM2Update_<ContainerAllocator> const> ConstPtr;

}; // struct ISAM2Update_

typedef ::bruce_msgs::ISAM2Update_<std::allocator<void> > ISAM2Update;

typedef boost::shared_ptr< ::bruce_msgs::ISAM2Update > ISAM2UpdatePtr;
typedef boost::shared_ptr< ::bruce_msgs::ISAM2Update const> ISAM2UpdateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bruce_msgs::ISAM2Update_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bruce_msgs::ISAM2Update_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bruce_msgs::ISAM2Update_<ContainerAllocator1> & lhs, const ::bruce_msgs::ISAM2Update_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.key == rhs.key &&
    lhs.isam2 == rhs.isam2 &&
    lhs.graph == rhs.graph &&
    lhs.values == rhs.values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bruce_msgs::ISAM2Update_<ContainerAllocator1> & lhs, const ::bruce_msgs::ISAM2Update_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bruce_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bruce_msgs::ISAM2Update_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bruce_msgs::ISAM2Update_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bruce_msgs::ISAM2Update_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bruce_msgs::ISAM2Update_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bruce_msgs::ISAM2Update_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bruce_msgs::ISAM2Update_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bruce_msgs::ISAM2Update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adea0c2c4633bd400b6e7cd433b18e42";
  }

  static const char* value(const ::bruce_msgs::ISAM2Update_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xadea0c2c4633bd40ULL;
  static const uint64_t static_value2 = 0x0b6e7cd433b18e42ULL;
};

template<class ContainerAllocator>
struct DataType< ::bruce_msgs::ISAM2Update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bruce_msgs/ISAM2Update";
  }

  static const char* value(const ::bruce_msgs::ISAM2Update_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bruce_msgs::ISAM2Update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint32 key\n"
"uint8[] isam2\n"
"uint8[] graph\n"
"uint8[] values\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::bruce_msgs::ISAM2Update_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bruce_msgs::ISAM2Update_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.key);
      stream.next(m.isam2);
      stream.next(m.graph);
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ISAM2Update_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bruce_msgs::ISAM2Update_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bruce_msgs::ISAM2Update_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "key: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.key);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "isam2: ";
    if (v.isam2.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.isam2.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.isam2[i]);
    }
    if (v.isam2.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "graph: ";
    if (v.graph.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.graph.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.graph[i]);
    }
    if (v.graph.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "values: ";
    if (v.values.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.values[i]);
    }
    if (v.values.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRUCE_MSGS_MESSAGE_ISAM2UPDATE_H
