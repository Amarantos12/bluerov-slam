// Generated by gencpp from file bar30_depth/Depth.msg
// DO NOT EDIT!


#ifndef BAR30_DEPTH_MESSAGE_DEPTH_H
#define BAR30_DEPTH_MESSAGE_DEPTH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace bar30_depth
{
template <class ContainerAllocator>
struct Depth_
{
  typedef Depth_<ContainerAllocator> Type;

  Depth_()
    : header()
    , time(0.0)
    , pressure_abs(0.0)
    , pressure_diff(0.0)
    , temperature(0.0)
    , depth(0.0)  {
    }
  Depth_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(0.0)
    , pressure_abs(0.0)
    , pressure_diff(0.0)
    , temperature(0.0)
    , depth(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _time_type;
  _time_type time;

   typedef float _pressure_abs_type;
  _pressure_abs_type pressure_abs;

   typedef float _pressure_diff_type;
  _pressure_diff_type pressure_diff;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _depth_type;
  _depth_type depth;





  typedef boost::shared_ptr< ::bar30_depth::Depth_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bar30_depth::Depth_<ContainerAllocator> const> ConstPtr;

}; // struct Depth_

typedef ::bar30_depth::Depth_<std::allocator<void> > Depth;

typedef boost::shared_ptr< ::bar30_depth::Depth > DepthPtr;
typedef boost::shared_ptr< ::bar30_depth::Depth const> DepthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bar30_depth::Depth_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bar30_depth::Depth_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bar30_depth::Depth_<ContainerAllocator1> & lhs, const ::bar30_depth::Depth_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.pressure_abs == rhs.pressure_abs &&
    lhs.pressure_diff == rhs.pressure_diff &&
    lhs.temperature == rhs.temperature &&
    lhs.depth == rhs.depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bar30_depth::Depth_<ContainerAllocator1> & lhs, const ::bar30_depth::Depth_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bar30_depth

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bar30_depth::Depth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bar30_depth::Depth_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bar30_depth::Depth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bar30_depth::Depth_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bar30_depth::Depth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bar30_depth::Depth_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bar30_depth::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd07528378d12aab22e9e6b826443a3a";
  }

  static const char* value(const ::bar30_depth::Depth_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd07528378d12aabULL;
  static const uint64_t static_value2 = 0x22e9e6b826443a3aULL;
};

template<class ContainerAllocator>
struct DataType< ::bar30_depth::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bar30_depth/Depth";
  }

  static const char* value(const ::bar30_depth::Depth_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bar30_depth::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float32 time\n"
"float32 pressure_abs\n"
"float32 pressure_diff\n"
"float32 temperature\n"
"float32 depth\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::bar30_depth::Depth_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bar30_depth::Depth_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.pressure_abs);
      stream.next(m.pressure_diff);
      stream.next(m.temperature);
      stream.next(m.depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Depth_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bar30_depth::Depth_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bar30_depth::Depth_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pressure_abs: ";
    Printer<float>::stream(s, indent + "  ", v.pressure_abs);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pressure_diff: ";
    Printer<float>::stream(s, indent + "  ", v.pressure_diff);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAR30_DEPTH_MESSAGE_DEPTH_H
